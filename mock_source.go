// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/source.go

// Package dolon is a generated GoMock package.
package dolon

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/kai5263499/dolon/types"
	reflect "reflect"
)

// MockSource is a mock of Source interface
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// Pcap mocks base method
func (m *MockSource) Pcap(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pcap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pcap indicates an expected call of Pcap
func (mr *MockSourceMockRecorder) Pcap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pcap", reflect.TypeOf((*MockSource)(nil).Pcap), arg0, arg1)
}

// Device mocks base method
func (m *MockSource) Device(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Device", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Device indicates an expected call of Device
func (mr *MockSourceMockRecorder) Device(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Device", reflect.TypeOf((*MockSource)(nil).Device), arg0, arg1)
}

// TcpSessionChan mocks base method
func (m *MockSource) TcpSessionChan() chan *types.TcpSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TcpSessionChan")
	ret0, _ := ret[0].(chan *types.TcpSession)
	return ret0
}

// TcpSessionChan indicates an expected call of TcpSessionChan
func (mr *MockSourceMockRecorder) TcpSessionChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpSessionChan", reflect.TypeOf((*MockSource)(nil).TcpSessionChan))
}
