// Code generated by protoc-gen-go. DO NOT EDIT.
// source: traffic.proto

/*
Package generated is a generated protocol buffer package.

It is generated from these files:
	traffic.proto

It has these top-level messages:
	RawCompletedStream
	Endpoint
	HttpStream
	HttpHeader
	HttpRequest
	HttpResponse
*/
package generated

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RawCompletedStream struct {
	SrcEndpoint *Endpoint `protobuf:"bytes,1,opt,name=SrcEndpoint" json:"SrcEndpoint,omitempty"`
	SrcData     []byte    `protobuf:"bytes,2,opt,name=SrcData,proto3" json:"SrcData,omitempty"`
	DstEndpoint *Endpoint `protobuf:"bytes,3,opt,name=DstEndpoint" json:"DstEndpoint,omitempty"`
	DstData     []byte    `protobuf:"bytes,4,opt,name=DstData,proto3" json:"DstData,omitempty"`
}

func (m *RawCompletedStream) Reset()                    { *m = RawCompletedStream{} }
func (m *RawCompletedStream) String() string            { return proto.CompactTextString(m) }
func (*RawCompletedStream) ProtoMessage()               {}
func (*RawCompletedStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RawCompletedStream) GetSrcEndpoint() *Endpoint {
	if m != nil {
		return m.SrcEndpoint
	}
	return nil
}

func (m *RawCompletedStream) GetSrcData() []byte {
	if m != nil {
		return m.SrcData
	}
	return nil
}

func (m *RawCompletedStream) GetDstEndpoint() *Endpoint {
	if m != nil {
		return m.DstEndpoint
	}
	return nil
}

func (m *RawCompletedStream) GetDstData() []byte {
	if m != nil {
		return m.DstData
	}
	return nil
}

type Endpoint struct {
	Ip   string `protobuf:"bytes,1,opt,name=Ip" json:"Ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=Port" json:"Port,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Endpoint) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Endpoint) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type HttpStream struct {
	RequestEndpoint  *Endpoint     `protobuf:"bytes,1,opt,name=RequestEndpoint" json:"RequestEndpoint,omitempty"`
	Request          *HttpRequest  `protobuf:"bytes,2,opt,name=Request" json:"Request,omitempty"`
	ResponseEndpoint *Endpoint     `protobuf:"bytes,3,opt,name=ResponseEndpoint" json:"ResponseEndpoint,omitempty"`
	Response         *HttpResponse `protobuf:"bytes,4,opt,name=Response" json:"Response,omitempty"`
}

func (m *HttpStream) Reset()                    { *m = HttpStream{} }
func (m *HttpStream) String() string            { return proto.CompactTextString(m) }
func (*HttpStream) ProtoMessage()               {}
func (*HttpStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HttpStream) GetRequestEndpoint() *Endpoint {
	if m != nil {
		return m.RequestEndpoint
	}
	return nil
}

func (m *HttpStream) GetRequest() *HttpRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *HttpStream) GetResponseEndpoint() *Endpoint {
	if m != nil {
		return m.ResponseEndpoint
	}
	return nil
}

func (m *HttpStream) GetResponse() *HttpResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type HttpHeader struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *HttpHeader) Reset()                    { *m = HttpHeader{} }
func (m *HttpHeader) String() string            { return proto.CompactTextString(m) }
func (*HttpHeader) ProtoMessage()               {}
func (*HttpHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HttpHeader) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HttpHeader) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type HttpRequest struct {
	Host        string        `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
	Verb        string        `protobuf:"bytes,2,opt,name=Verb" json:"Verb,omitempty"`
	Uri         string        `protobuf:"bytes,3,opt,name=Uri" json:"Uri,omitempty"`
	HttpVersion string        `protobuf:"bytes,4,opt,name=HttpVersion" json:"HttpVersion,omitempty"`
	Headers     []*HttpHeader `protobuf:"bytes,5,rep,name=headers" json:"headers,omitempty"`
	Body        []byte        `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *HttpRequest) Reset()                    { *m = HttpRequest{} }
func (m *HttpRequest) String() string            { return proto.CompactTextString(m) }
func (*HttpRequest) ProtoMessage()               {}
func (*HttpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HttpRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HttpRequest) GetVerb() string {
	if m != nil {
		return m.Verb
	}
	return ""
}

func (m *HttpRequest) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *HttpRequest) GetHttpVersion() string {
	if m != nil {
		return m.HttpVersion
	}
	return ""
}

func (m *HttpRequest) GetHeaders() []*HttpHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HttpRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type HttpResponse struct {
	Version string        `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
	Code    int32         `protobuf:"varint,2,opt,name=Code" json:"Code,omitempty"`
	Headers []*HttpHeader `protobuf:"bytes,3,rep,name=Headers" json:"Headers,omitempty"`
	Body    []byte        `protobuf:"bytes,4,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (m *HttpResponse) Reset()                    { *m = HttpResponse{} }
func (m *HttpResponse) String() string            { return proto.CompactTextString(m) }
func (*HttpResponse) ProtoMessage()               {}
func (*HttpResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HttpResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *HttpResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HttpResponse) GetHeaders() []*HttpHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HttpResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*RawCompletedStream)(nil), "generated.RawCompletedStream")
	proto.RegisterType((*Endpoint)(nil), "generated.Endpoint")
	proto.RegisterType((*HttpStream)(nil), "generated.HttpStream")
	proto.RegisterType((*HttpHeader)(nil), "generated.HttpHeader")
	proto.RegisterType((*HttpRequest)(nil), "generated.HttpRequest")
	proto.RegisterType((*HttpResponse)(nil), "generated.HttpResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Traffic service

type TrafficClient interface {
	GetHttpStream(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (Traffic_GetHttpStreamClient, error)
}

type trafficClient struct {
	cc *grpc.ClientConn
}

func NewTrafficClient(cc *grpc.ClientConn) TrafficClient {
	return &trafficClient{cc}
}

func (c *trafficClient) GetHttpStream(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (Traffic_GetHttpStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Traffic_serviceDesc.Streams[0], c.cc, "/generated.Traffic/GetHttpStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &trafficGetHttpStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Traffic_GetHttpStreamClient interface {
	Recv() (*HttpStream, error)
	grpc.ClientStream
}

type trafficGetHttpStreamClient struct {
	grpc.ClientStream
}

func (x *trafficGetHttpStreamClient) Recv() (*HttpStream, error) {
	m := new(HttpStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Traffic service

type TrafficServer interface {
	GetHttpStream(*google_protobuf.Empty, Traffic_GetHttpStreamServer) error
}

func RegisterTrafficServer(s *grpc.Server, srv TrafficServer) {
	s.RegisterService(&_Traffic_serviceDesc, srv)
}

func _Traffic_GetHttpStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrafficServer).GetHttpStream(m, &trafficGetHttpStreamServer{stream})
}

type Traffic_GetHttpStreamServer interface {
	Send(*HttpStream) error
	grpc.ServerStream
}

type trafficGetHttpStreamServer struct {
	grpc.ServerStream
}

func (x *trafficGetHttpStreamServer) Send(m *HttpStream) error {
	return x.ServerStream.SendMsg(m)
}

var _Traffic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generated.Traffic",
	HandlerType: (*TrafficServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetHttpStream",
			Handler:       _Traffic_GetHttpStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traffic.proto",
}

func init() { proto.RegisterFile("traffic.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x49, 0xd3, 0xd4, 0xe3, 0x16, 0xaa, 0x05, 0x8a, 0x55, 0x2e, 0x91, 0x4f, 0x39, 0x39,
	0x95, 0x0b, 0x47, 0x84, 0xd4, 0xa6, 0xc2, 0x15, 0x42, 0x42, 0x1b, 0xc8, 0xdd, 0x89, 0x27, 0x21,
	0x52, 0xe2, 0x35, 0xeb, 0x8d, 0x50, 0x8e, 0xfc, 0x10, 0x47, 0x7e, 0x8c, 0x1f, 0x40, 0x3b, 0xbb,
	0x6b, 0x56, 0x89, 0x14, 0x71, 0x7b, 0xbb, 0xf3, 0xe6, 0xcd, 0x9b, 0xd1, 0x0c, 0x5c, 0x28, 0x59,
	0x2c, 0x16, 0xab, 0x79, 0x5a, 0x4b, 0xa1, 0x04, 0x0b, 0x97, 0x58, 0xa1, 0x2c, 0x14, 0x96, 0xd7,
	0xaf, 0x97, 0x42, 0x2c, 0xd7, 0x38, 0xa2, 0xc0, 0x6c, 0xbb, 0x18, 0xe1, 0xa6, 0x56, 0x3b, 0xc3,
	0x4b, 0x7e, 0x07, 0xc0, 0x78, 0xf1, 0xe3, 0x5e, 0x6c, 0xea, 0x35, 0x2a, 0x2c, 0x27, 0x4a, 0x62,
	0xb1, 0x61, 0x6f, 0x21, 0x9a, 0xc8, 0xf9, 0x43, 0x55, 0xd6, 0x62, 0x55, 0xa9, 0x38, 0x18, 0x04,
	0xc3, 0x28, 0x7b, 0x9e, 0xb6, 0xa2, 0xa9, 0x0b, 0x71, 0x9f, 0xc7, 0x62, 0xe8, 0x4f, 0xe4, 0x7c,
	0x5c, 0xa8, 0x22, 0xee, 0x0c, 0x82, 0xe1, 0x39, 0x77, 0x4f, 0x2d, 0x38, 0x6e, 0x54, 0x2b, 0xd8,
	0x3d, 0x22, 0xe8, 0xf1, 0xb4, 0xe0, 0xb8, 0x51, 0x24, 0x78, 0x62, 0x04, 0xed, 0x33, 0x49, 0xe1,
	0xac, 0x65, 0x3d, 0x85, 0xce, 0x63, 0x4d, 0x26, 0x43, 0xde, 0x79, 0xac, 0x19, 0x83, 0x93, 0xcf,
	0x42, 0x2a, 0xf2, 0xd0, 0xe3, 0x84, 0x93, 0x3f, 0x01, 0x40, 0xae, 0x54, 0x6d, 0x1b, 0x7c, 0x07,
	0xcf, 0x38, 0x7e, 0xdf, 0xa2, 0xe7, 0xe9, 0x48, 0x93, 0xfb, 0x5c, 0x76, 0x03, 0x7d, 0xfb, 0x45,
	0x45, 0xa2, 0xec, 0xca, 0x4b, 0xd3, 0x65, 0x6c, 0x94, 0x3b, 0x1a, 0x7b, 0x0f, 0x97, 0x1c, 0x9b,
	0x5a, 0x54, 0x0d, 0xfe, 0xcf, 0x14, 0x0e, 0xc8, 0xec, 0x16, 0xce, 0xdc, 0x1f, 0xcd, 0x22, 0xca,
	0x5e, 0x1d, 0xd4, 0x34, 0x61, 0xde, 0x12, 0x93, 0x37, 0xa6, 0xe9, 0x1c, 0x8b, 0x12, 0x25, 0xbb,
	0x84, 0xee, 0x47, 0xdc, 0xd9, 0x41, 0x69, 0xc8, 0x5e, 0x40, 0x6f, 0x5a, 0xac, 0xb7, 0x48, 0x5d,
	0x84, 0xdc, 0x3c, 0x92, 0x5f, 0x01, 0x44, 0x5e, 0x13, 0x7a, 0x9e, 0xb9, 0x68, 0x94, 0x4d, 0x24,
	0xac, 0xff, 0xa6, 0x28, 0x67, 0x36, 0x91, 0xb0, 0xd6, 0xff, 0x2a, 0x57, 0xd4, 0x56, 0xc8, 0x35,
	0x64, 0x03, 0x23, 0x34, 0x45, 0xd9, 0xac, 0x44, 0x45, 0xbe, 0x43, 0xee, 0x7f, 0xb1, 0x11, 0xf4,
	0xbf, 0x91, 0xbb, 0x26, 0xee, 0x0d, 0xba, 0xc3, 0x28, 0x7b, 0xb9, 0xd7, 0x95, 0xf1, 0xce, 0x1d,
	0x4b, 0x17, 0x9e, 0x89, 0x72, 0x17, 0x9f, 0xd2, 0x3e, 0x10, 0x4e, 0x7e, 0x06, 0x70, 0xee, 0x4f,
	0x40, 0xef, 0x8d, 0xab, 0x69, 0x4c, 0xbb, 0xa7, 0x4e, 0xbf, 0x17, 0x25, 0xba, 0xdd, 0xd0, 0x58,
	0x7b, 0xc8, 0xad, 0x87, 0xee, 0x51, 0x0f, 0xf9, 0x3f, 0x0f, 0x77, 0xda, 0x83, 0xd9, 0x49, 0xc2,
	0xd9, 0x27, 0xe8, 0x7f, 0x31, 0x27, 0xc8, 0xee, 0xe0, 0xe2, 0x03, 0x2a, 0x6f, 0xdb, 0xae, 0x52,
	0x73, 0x83, 0xa9, 0xbb, 0xc1, 0xf4, 0x41, 0xdf, 0xe0, 0xf5, 0x7e, 0x1d, 0x43, 0x4f, 0x9e, 0xdc,
	0x04, 0xb3, 0x53, 0xa2, 0xde, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xd7, 0x66, 0xbb, 0xd8,
	0x03, 0x00, 0x00,
}
